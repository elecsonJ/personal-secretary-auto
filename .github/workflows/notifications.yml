name: Personal Secretary Notifications

on:
  schedule:
    # 개선된 날씨 체크 - 2시간마다 (7시, 21시 제외)
    # UTC: 1,3,5,7,9,11,13,15,17,19,21,23시 = KST: 10,12,14,16,18,20,22,0,2,4,6,8시
    - cron: '0 1,3,5,7,9,11,13,15,17,19,21,23 * * *'
    # 매일 오전 7시 아침 브리핑 (한국시간 오전 7시 = UTC 전날 22시)
    - cron: '0 22 * * *'
    # 아침 브리핑 백업 (5분 후)
    - cron: '5 22 * * *'  
    # 매일 오후 7시 저녁 브리핑 (한국시간 오후 7시 = UTC 당일 10시)
    - cron: '0 10 * * *'
    # 저녁 브리핑 백업 (5분 후)
    - cron: '5 10 * * *'
  
  # 수동 실행 가능
  workflow_dispatch:
    inputs:
      notification_type:
        description: 'Type of notification to send'
        required: false
        default: 'weather_check'
        type: choice
        options:
        - weather_check
        - morning_briefing
        - evening_briefing
        - test_all

jobs:
  send-notifications:
    runs-on: ubuntu-latest
    
    # GitHub Actions Best Practice: 동일한 워크플로우의 중복 실행 방지
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Set up environment variables
      run: |
        echo "FIREBASE_SERVICE_ACCOUNT=${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" >> $GITHUB_ENV
        echo "FCM_TOKEN_MACBOOK=${{ secrets.FCM_TOKEN_MACBOOK }}" >> $GITHUB_ENV
        echo "FCM_TOKEN_IPHONE=${{ secrets.FCM_TOKEN_IPHONE }}" >> $GITHUB_ENV
        echo "NYT_API_KEY=${{ secrets.NYT_API_KEY }}" >> $GITHUB_ENV
        echo "NOTION_API_KEY=${{ secrets.NOTION_API_KEY }}" >> $GITHUB_ENV
        echo "NOTION_CALENDAR_DB_ID=${{ secrets.NOTION_CALENDAR_DB_ID }}" >> $GITHUB_ENV
        echo "NOTION_TASKS_DB_ID=${{ secrets.NOTION_TASKS_DB_ID }}" >> $GITHUB_ENV
    
    # 데이터 디렉토리 생성
    - name: Create data directory
      run: mkdir -p ./data
    
    # 이전 날씨 데이터 복원
    - name: Download previous weather data
      uses: actions/download-artifact@v4
      with:
        name: weather-data
        path: ./data
      continue-on-error: true
    
    - name: Check current time and determine action
      id: determine_action
      run: |
        HOUR=$(TZ='Asia/Seoul' date +%H)
        MINUTE=$(TZ='Asia/Seoul' date +%M)
        echo "Korean time: $HOUR:$MINUTE"
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "action=${{ github.event.inputs.notification_type }}" >> $GITHUB_OUTPUT
        elif [ "$HOUR" = "07" ] && [ "$MINUTE" -lt "30" ]; then
          echo "action=morning_briefing" >> $GITHUB_OUTPUT
          echo "Morning briefing time detected"
        elif [ "$HOUR" = "19" ] && [ "$MINUTE" -lt "30" ]; then
          echo "action=evening_briefing" >> $GITHUB_OUTPUT
          echo "Evening briefing time detected"
        else
          echo "action=weather_check" >> $GITHUB_OUTPUT
          echo "Weather check time"
        fi
    
    - name: Run weather check
      if: steps.determine_action.outputs.action == 'weather_check'
      run: |
        cd server
        node -e "
        const { checkWeatherChanges } = require('./index.js');
        const executionId = 'github-actions-${{ github.run_id }}-${{ github.run_number }}';
        console.log('GitHub Actions Execution ID:', executionId);
        checkWeatherChanges(executionId).then(() => {
          console.log('날씨 변화 감지 완료');
          process.exit(0);
        }).catch(err => {
          console.error('날씨 체크 실패:', err);
          console.error('스택 트레이스:', err.stack);
          console.log('오류가 발생했지만 계속 진행합니다');
          process.exit(0);
        });
        "
    
    - name: Send morning briefing
      if: steps.determine_action.outputs.action == 'morning_briefing'
      run: |
        cd server
        node -e "
        const { sendMorningBriefing } = require('./index.js');
        const executionId = 'github-actions-${{ github.run_id }}-${{ github.run_number }}';
        console.log('GitHub Actions Execution ID:', executionId);
        sendMorningBriefing(executionId).then(() => {
          console.log('아침 브리핑 전송 완료');
          process.exit(0);
        }).catch(err => {
          console.error('아침 브리핑 실패:', err);
          console.error('스택 트레이스:', err.stack);
          console.log('오류가 발생했지만 계속 진행합니다');
          process.exit(0);
        });
        "
    
    - name: Send evening briefing
      if: steps.determine_action.outputs.action == 'evening_briefing'
      run: |
        cd server
        node -e "
        const { sendEveningBriefing } = require('./index.js');
        const executionId = 'github-actions-${{ github.run_id }}-${{ github.run_number }}';
        console.log('GitHub Actions Execution ID:', executionId);
        sendEveningBriefing(executionId).then(() => {
          console.log('저녁 브리핑 전송 완료');
          process.exit(0);
        }).catch(err => {
          console.error('저녁 브리핑 실패:', err);
          console.error('스택 트레이스:', err.stack);
          console.log('오류가 발생했지만 계속 진행합니다');
          process.exit(0);
        });
        "
    
    
    - name: Test all notifications
      if: steps.determine_action.outputs.action == 'test_all'
      run: |
        cd server
        node -e "
        const { sendMorningBriefing, sendEveningBriefing, checkWeatherChanges } = require('./index.js');
        const executionId = 'github-actions-${{ github.run_id }}-${{ github.run_number }}';
        console.log('GitHub Actions Execution ID:', executionId);
        
        async function testAll() {
          console.log('테스트 시작...');
          
          await checkWeatherChanges(executionId);
          console.log('날씨 체크 완료');
          
          await new Promise(resolve => setTimeout(resolve, 2000));
          
          await sendMorningBriefing(executionId);
          console.log('아침 브리핑 완료');
          
          await new Promise(resolve => setTimeout(resolve, 2000));
          
          await sendEveningBriefing(executionId);
          console.log('저녁 브리핑 완료');
          
          console.log('모든 테스트 완료');
        }
        
        testAll().then(() => process.exit(0)).catch(err => {
          console.error('테스트 실패:', err);
          console.error('스택 트레이스:', err.stack);
          console.log('오류가 발생했지만 계속 진행합니다');
          process.exit(0);
        });
        "
    
    # 날씨 데이터 저장 (다음 실행을 위해)
    - name: Check if weather data exists
      id: check_weather_data
      run: |
        if [ -f "./data/weather-state.json" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "✅ weather-state.json 파일 발견"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "ℹ️ weather-state.json 파일 없음 - 첫 실행이거나 생성되지 않음"
        fi
    
    - name: Save weather data
      if: steps.check_weather_data.outputs.exists == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: weather-data
        path: ./data/weather-state.json
        retention-days: 7
      continue-on-error: true
    
    - name: Log completion
      run: |
        echo "Notification job completed at $(TZ='Asia/Seoul' date)"
        echo "Action performed: ${{ steps.determine_action.outputs.action }}"